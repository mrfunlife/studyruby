# String
s = "hello"
puts s[-3..-1]
puts s[0..0]
puts s[2..1]


# Array
[1, 2, 3]
[[1,2],[3,4],[5]]
a = [0,1,2,3,4,5]

#p ['a','b,'c','b','a'] - ['b','c','d']

# Ranges
p ("aa".."cc").include?("ab")

r = 0...100
puts r.member? 50
puts r.member? 99.9


# Symbols
# Cac bien co cung gia tri thi dung symbols de dung trong 1 o nho => tiet kiem bo nho
:"abc"


# Boolean
puts 1 == true.class
puts true.class

# Nil
puts nil.class
puts 1.nil?

a = "Ruby"
b = c = "Ruby"
puts a.equal?(b)
puts b.equal?(c)
puts a == b


# Dung "*"
x, *y = 1,2,3
puts y

x, *y, z = 1, *[2,3,4]
puts y

# Operator



# Bai tap:
# FizzBuzz: Nhap vao 1 mang, neu phan tu chia het cho 2 => print ra: "Fuzz", neu chia het cho 3 -> "Buzz", neu % 2& 3==0 => print FizzBuzz

a = [2,3,4,6,7,8,9,10,12,13,14,22,24,30,34,21,35,34,46,48,60,100]
a.each do |i|
    if i % 2 == 0 && i % 3 == 0
     puts "Fizz Buzz"
    elsif i %2 == 0
     puts "Fizz"
    elsif i % 3 == 0
     puts "Buzz"
    else
    end
end


# Phuong trinh bac 2


a,b,c = 2,-7,3
delta = b * b - 4 * a * c
puts "Delta: #{delta}"

if a == 0
  puts "Phuong trinh khong phai la phuong trinh bac 2"
else
  if delta < 0
    puts "Phuong trinh vo nghiem"
  elsif delta == 0
    x = -b / (2*a)
    puts "Phuong trinh co nghiem kep: x1 = x2 = #{x}"
  else
    puts "Phuong trinh co 2 nghiem:"
    x1 = (-b + Math.sqrt(delta)) / (2 * a)
    x2 = (-b - Math.sqrt(delta)) / (2 * a)
    puts "x1 = #{x1}"
    puts "x2 = #{x2}"
  end
end

# Closure
# Proc - Block - Lambda
# Lambda tro? vao ham - Block tra ve block - Proc thi chuyen block thanh 1 object
# Doi Proc va Lambda: Lambda: so luong tham so dau vao thif check, proc thi khong quan trong.
# Lambda Proc goi return va thoat luon, Lamda goi return va tiep tuc chay tiep, lambda chay thread khac/
# BTVN:  Tim liet ke so nguyen to or uoc chung lon nhat

#------------------- Noi dung ---------

#Ranges
r = 1..5
r1 = 'a'..'d'
r.each{|c|print c}
r1.each{|c|print c}
p r.to_a
puts ("aa".."cc").include?("ab")
puts ("aa".."cc").member?("ab")
puts ("aa".."cc").cover?("ac")


# True, False and Nil
# Object
puts 8.class
puts "test".class
puts "test".is_a? String

a = "Ruby"
b = c = "Ruby"
puts a.equal?(b)
puts b.equal?(c)
puts a == b

# Variables
one  = 10
CM_PER_INCH = 2.54

x, y, z = 1, 2, 3
x, y, z = [1,2,3]
x = 1,2,3
x,y,z = 1, *[2,3]
puts x
puts y
puts z
x, = [1,2]
puts x
x, y, z = 1,2
puts x
puts y
x,*y = 1,2,3
puts x
puts y
x,y,*z = 1,*[2,3,4]
puts z

a,b,c,d = [1,[2,[3,4]]]

puts a
p b


a,(b,(c,d)) = [1,[2,[3,4]]]
puts a
puts b
puts c
puts d

x = 3
y =2
x >>=3
puts x


# Conditionals
x = 1
 unless x!=1
    puts "OK"
end

# Loops

puts x = x +1 while  x < 10
x = 1
puts x = x + 1 until x > 10

a = [1,2,3]
puts a.pop until a.empty?

puts "---------------"
[1,2,3].each{|x|puts x}
p [1,2,3].map {|x|x*x }
p [1,2,3].collect{|x|x*x}


def display(n)
  i = 0
  while (i <= n)
    yield i
    i += 1
  end
end
display(10){|y|puts y}


puts "hello".chars.map {|c| c.succ }

p "hello".each_byte.to_a
